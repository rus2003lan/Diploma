// Package web provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package web

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Docs defines model for Docs.
type Docs = openapi3.T

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Param defines model for Param.
type Param struct {
	Name     string   `json:"name"`
	Patterns []string `json:"patterns"`
	Values   []string `json:"values"`
}

// Report defines model for Report.
type Report struct {
	Id   string `json:"id"`
	Urls []URL  `json:"urls"`
}

// ReportsList defines model for ReportsList.
type ReportsList = []Report

// URL defines model for URL.
type URL struct {
	Method string  `json:"method"`
	Params []Param `json:"params"`
	Url    string  `json:"url"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Internal defines model for Internal.
type Internal = Error

// NotFound defines model for NotFound.
type NotFound = Error

// ReportSaveParams defines parameters for ReportSave.
type ReportSaveParams struct {
	// Url url
	Url string `form:"url" json:"url"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get doc
	// (GET /api/doc)
	Doc(w http.ResponseWriter, r *http.Request)
	// get reports list
	// (GET /api/report)
	ReportList(w http.ResponseWriter, r *http.Request)
	// save report
	// (POST /api/report)
	ReportSave(w http.ResponseWriter, r *http.Request, params ReportSaveParams)
	// get report info by id
	// (GET /api/report/{id})
	ReportFetch(w http.ResponseWriter, r *http.Request, id string)
	// get report info by id
	// (GET /api/report/{id}/sqlmap)
	ReportSQLMap(w http.ResponseWriter, r *http.Request, id string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// get doc
// (GET /api/doc)
func (_ Unimplemented) Doc(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get reports list
// (GET /api/report)
func (_ Unimplemented) ReportList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// save report
// (POST /api/report)
func (_ Unimplemented) ReportSave(w http.ResponseWriter, r *http.Request, params ReportSaveParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get report info by id
// (GET /api/report/{id})
func (_ Unimplemented) ReportFetch(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get report info by id
// (GET /api/report/{id}/sqlmap)
func (_ Unimplemented) ReportSQLMap(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Doc operation middleware
func (siw *ServerInterfaceWrapper) Doc(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Doc(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReportList operation middleware
func (siw *ServerInterfaceWrapper) ReportList(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReportList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReportSave operation middleware
func (siw *ServerInterfaceWrapper) ReportSave(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ReportSaveParams

	// ------------- Required query parameter "url" -------------

	if paramValue := r.URL.Query().Get("url"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "url"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "url", r.URL.Query(), &params.Url)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "url", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReportSave(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReportFetch operation middleware
func (siw *ServerInterfaceWrapper) ReportFetch(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReportFetch(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReportSQLMap operation middleware
func (siw *ServerInterfaceWrapper) ReportSQLMap(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReportSQLMap(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/doc", wrapper.Doc)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/report", wrapper.ReportList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/report", wrapper.ReportSave)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/report/{id}", wrapper.ReportFetch)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/report/{id}/sqlmap", wrapper.ReportSQLMap)
	})

	return r
}

type BadRequestApplicationJSONCharsetUTF8Response Error

type InternalApplicationJSONCharsetUTF8Response Error

type NotFoundApplicationJSONCharsetUTF8Response Error

type DocRequestObject struct {
}

type DocResponseObject interface {
	VisitDocResponse(w http.ResponseWriter) error
}

type Doc200ApplicationJSONCharsetUTF8Response Docs

func (response Doc200ApplicationJSONCharsetUTF8Response) VisitDocResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Doc401ApplicationJSONCharsetUTF8Response Error

func (response Doc401ApplicationJSONCharsetUTF8Response) VisitDocResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Doc403ApplicationJSONCharsetUTF8Response Error

func (response Doc403ApplicationJSONCharsetUTF8Response) VisitDocResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Doc500ApplicationJSONCharsetUTF8Response Error

func (response Doc500ApplicationJSONCharsetUTF8Response) VisitDocResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReportListRequestObject struct {
}

type ReportListResponseObject interface {
	VisitReportListResponse(w http.ResponseWriter) error
}

type ReportList200ApplicationJSONCharsetUTF8Response ReportsList

func (response ReportList200ApplicationJSONCharsetUTF8Response) VisitReportListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReportList400ApplicationJSONCharsetUTF8Response Error

func (response ReportList400ApplicationJSONCharsetUTF8Response) VisitReportListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReportList404ApplicationJSONCharsetUTF8Response Error

func (response ReportList404ApplicationJSONCharsetUTF8Response) VisitReportListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReportList500ApplicationJSONCharsetUTF8Response Error

func (response ReportList500ApplicationJSONCharsetUTF8Response) VisitReportListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReportSaveRequestObject struct {
	Params ReportSaveParams
}

type ReportSaveResponseObject interface {
	VisitReportSaveResponse(w http.ResponseWriter) error
}

type ReportSave200ApplicationJSONCharsetUTF8Response string

func (response ReportSave200ApplicationJSONCharsetUTF8Response) VisitReportSaveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReportSave400ApplicationJSONCharsetUTF8Response Error

func (response ReportSave400ApplicationJSONCharsetUTF8Response) VisitReportSaveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReportSave404ApplicationJSONCharsetUTF8Response Error

func (response ReportSave404ApplicationJSONCharsetUTF8Response) VisitReportSaveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReportSave500ApplicationJSONCharsetUTF8Response Error

func (response ReportSave500ApplicationJSONCharsetUTF8Response) VisitReportSaveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReportFetchRequestObject struct {
	Id string `json:"id"`
}

type ReportFetchResponseObject interface {
	VisitReportFetchResponse(w http.ResponseWriter) error
}

type ReportFetch200ApplicationJSONCharsetUTF8Response Report

func (response ReportFetch200ApplicationJSONCharsetUTF8Response) VisitReportFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReportFetch400ApplicationJSONCharsetUTF8Response Error

func (response ReportFetch400ApplicationJSONCharsetUTF8Response) VisitReportFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReportFetch404ApplicationJSONCharsetUTF8Response Error

func (response ReportFetch404ApplicationJSONCharsetUTF8Response) VisitReportFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReportFetch500ApplicationJSONCharsetUTF8Response Error

func (response ReportFetch500ApplicationJSONCharsetUTF8Response) VisitReportFetchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReportSQLMapRequestObject struct {
	Id string `json:"id"`
}

type ReportSQLMapResponseObject interface {
	VisitReportSQLMapResponse(w http.ResponseWriter) error
}

type ReportSQLMap200TextResponse string

func (response ReportSQLMap200TextResponse) VisitReportSQLMapResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type ReportSQLMap400ApplicationJSONCharsetUTF8Response Error

func (response ReportSQLMap400ApplicationJSONCharsetUTF8Response) VisitReportSQLMapResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReportSQLMap404ApplicationJSONCharsetUTF8Response Error

func (response ReportSQLMap404ApplicationJSONCharsetUTF8Response) VisitReportSQLMapResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReportSQLMap500ApplicationJSONCharsetUTF8Response Error

func (response ReportSQLMap500ApplicationJSONCharsetUTF8Response) VisitReportSQLMapResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// get doc
	// (GET /api/doc)
	Doc(ctx context.Context, request DocRequestObject) (DocResponseObject, error)
	// get reports list
	// (GET /api/report)
	ReportList(ctx context.Context, request ReportListRequestObject) (ReportListResponseObject, error)
	// save report
	// (POST /api/report)
	ReportSave(ctx context.Context, request ReportSaveRequestObject) (ReportSaveResponseObject, error)
	// get report info by id
	// (GET /api/report/{id})
	ReportFetch(ctx context.Context, request ReportFetchRequestObject) (ReportFetchResponseObject, error)
	// get report info by id
	// (GET /api/report/{id}/sqlmap)
	ReportSQLMap(ctx context.Context, request ReportSQLMapRequestObject) (ReportSQLMapResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Doc operation middleware
func (sh *strictHandler) Doc(w http.ResponseWriter, r *http.Request) {
	var request DocRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Doc(ctx, request.(DocRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Doc")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DocResponseObject); ok {
		if err := validResponse.VisitDocResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReportList operation middleware
func (sh *strictHandler) ReportList(w http.ResponseWriter, r *http.Request) {
	var request ReportListRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReportList(ctx, request.(ReportListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReportList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReportListResponseObject); ok {
		if err := validResponse.VisitReportListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReportSave operation middleware
func (sh *strictHandler) ReportSave(w http.ResponseWriter, r *http.Request, params ReportSaveParams) {
	var request ReportSaveRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReportSave(ctx, request.(ReportSaveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReportSave")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReportSaveResponseObject); ok {
		if err := validResponse.VisitReportSaveResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReportFetch operation middleware
func (sh *strictHandler) ReportFetch(w http.ResponseWriter, r *http.Request, id string) {
	var request ReportFetchRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReportFetch(ctx, request.(ReportFetchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReportFetch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReportFetchResponseObject); ok {
		if err := validResponse.VisitReportFetchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReportSQLMap operation middleware
func (sh *strictHandler) ReportSQLMap(w http.ResponseWriter, r *http.Request, id string) {
	var request ReportSQLMapRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReportSQLMap(ctx, request.(ReportSQLMapRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReportSQLMap")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReportSQLMapResponseObject); ok {
		if err := validResponse.VisitReportSQLMapResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXUW/jNgz+KwK3Ryf2XTtg8LCHG7YCxbqt67Xbw5AHxWZiXW1JpeS2WeH/PlBynCZN",
	"L+1wFxR3fYodU+RH+uNH+g4K01ijUXsH+R0QOmu0w3DzkyzP8KpF5/muMNqjDpfS2loV0iuj0w/O6B9E",
	"UUly6H+8OD8afc8mrqiwkXz1LeEMcvgmXUVK41OX/kJkCLquS6BEV5Cy7BNy+EvWqgwBBEabBI61R9Ky",
	"3juYZWDhkK6RVoh+N/7ItLrcO6LzCoWzWKiZwlIQOtNSgeJGOqGNF7MAio/1njjQz6YIv35hEXJwnpSe",
	"QwK3o7kZ9X8ai1padTA+v/9gpBprKKRmpa8gh7nyVTsdF6ZJ5+gvlU4vlR71p9Oll4Ag5pDfAd7KxtYY",
	"a1Ui5G+zLIEGnZNzjr286hKwZCySV5GG0XoArrTHOYb6D4c3s+LAhFetIiwh/2cwTKKzSbK0N9MPWHj2",
	"dSpJNiHFteBaNtv8J1wJZkUwUh4bt9Wq/0MSyQXfX8u6xWed2cgk4Bn83IOxLaczHN7bWlKq3Bq4pXod",
	"2se4eXF2shOsKqH3+jg6d6Kivjwpap/RZpxwdLKBhhlsGn5m/QLymawddgkw8AcVadBXpnzkRZNsnl6X",
	"yKMtr76lejdR2ShZohliP6wen1N6ZtjjujS8Oz0WM0PixtCluFG+EhTrDAl45bkBl5VnHiG5eC4bZ+M3",
	"jLPvXsjhYJyNDyLHqpB3yt1dmoKv5xjeGhcxKN1xCTlrDCTrQ+Rtln0ueQyKtkUd//iV8zjM3uxdly+0",
	"bH1lSP2LZcRwsHcMR4amqixRM4DvPl/1nzsueRq1TSNpwQMEvSgDWbycO2b+DU5hwkaBZDQo11aeRQIH",
	"5dgf3e7r1UdYl72IZekwO3yhW8nLJmUvlqKO3FpnZwLWuEfp+F5e41Kz0SPxwU11jvqOt7YOS42nFlnI",
	"IYerFolnVlw4esPVaIiWqyI8GFPOL4K2zww10E0+bVtsDq1X8n9x5HfyGnv271Dl9E6V3Q5pPkJfVA+b",
	"YSB+WMZ65odvioH4YWf8H7x3KnxdfGrmP2UZfW2HL3kWCN6zxXQhAjN3NkbqrupG2h398f7Pk9+kfaEN",
	"4vHWp7aWHPxZUyCmvlSR1w74GjqAzwQnkcDhKxfSQLPecnMH+hun4t3p8YrR7KmbdP8FAAD//0uvwHmM",
	"FAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
